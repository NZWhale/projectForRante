!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"loginHandler",(function(){return y}));var r=function(t,e,n,r){return new(n||(n=Promise))((function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((r=r.apply(t,e||[])).next())}))},o=function(t,e){var n,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},u=document.getElementById("root");function i(t){return r(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,fetch(t)];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()]}}))}))}function a(t){return r(this,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:return[4,i(t)];case 1:return e=r.sent(),n=(o=e)[Math.floor(Math.random()*o.length)],document.body.style.backgroundImage="url(http://127.0.0.1:3000"+n+")",document.body.style.backgroundSize="110%",document.body.style.backgroundRepeat="no-repeat",[2]}var o}))}))}var c=function(t,e,n,r){var o;(void 0===(o={login:t,password:e})&&(o={}),fetch(n,{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json"},credentials:"same-origin"}).then((function(t){return t}),(function(t){console.log(t,"data wasn't wrote")}))).then((function(t){if(200===t.status)return r.setLoginStatus(!0),s(u,r),t}))},s=function(t,e){t.innerHTML="";var n=l(t,"background"),r=l(t,"parts"),o=l(t,"full"),u=d("input","exitButton");u.setAttribute("type","button"),u.innerText="exit",u.addEventListener("click",(function(){e.setLoginStatus(!1)})),t.append(n,r,o,u)},l=function(t,e){var n=document.createElement("div"),r=document.createElement("form"),o=document.createElement("input"),u=document.createElement("input");return r.setAttribute("action","/"+e),r.setAttribute("method","POST"),r.setAttribute("enctype","multipart/form-data"),o.setAttribute("type","file"),o.setAttribute("name","images"),o.setAttribute("multiple","true"),u.setAttribute("type","submit"),u.setAttribute("value","Send file"),n.innerText=""+e,r.append(o,u),n.append(r),n},d=function(t,e){var n=document.createElement(t);return n.setAttribute("id",e),n},f=function(t,e,n){var r=d("input","adminAccess");return r.setAttribute("type","button"),r.setAttribute("value","admin access"),r.addEventListener("click",(function(){document.body.style.backgroundImage="",t.innerHTML="",function(t,e,n){var r=d("div","loginDiv"),o=d("input","loginForm"),u=d("input","passwordForm"),i=d("input","loginButton");i.addEventListener("click",(function(t){var r=document.getElementById("loginForm").value,o=document.getElementById("passwordForm").value;13===t.keyCode?r?o?c(r,o,n,e):alert("Please enter password"):alert("Please enter login"):c(r,o,n,e)})),u.setAttribute("type","password"),i.setAttribute("type","submit"),r.append(o,u,i),t.append(r)}(t,e,n)})),r};class p extends class{constructor(){this._handlers=[]}addChangeEventListener(t){this._handlers.push(t)}executeHandlers(){this._handlers.forEach(t=>{t()})}}{constructor(){super(),this._userIsLoggedIn=!1}setLoginStatus(t){this._userIsLoggedIn=t,this.executeHandlers()}getLoginStatus(){return this._userIsLoggedIn}}var b=function(t,e,n,r){return new(n||(n=Promise))((function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((r=r.apply(t,e||[])).next())}))},h=function(t,e){var n,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},y="http://127.0.0.1:3000/login";window.addEventListener("load",(function(){return b(void 0,void 0,void 0,(function(){var t,e,n;return h(this,(function(r){switch(r.label){case 0:return t=document.getElementById("root"),e=new p,n=f(t,e,y),[4,a("http://127.0.0.1:3000/getbackground")];case 1:return r.sent(),t.append(n),[2]}}))}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,