!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"loginHandler",(function(){return x}));var r=function(t,e,n,r){return new(n||(n=Promise))((function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((r=r.apply(t,e||[])).next())}))},o=function(t,e){var n,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},u=document.getElementById("root"),i=function(t){return t[Math.floor(Math.random()*t.length)]};function a(t){return r(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return[4,fetch(t)];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()]}}))}))}var c=function(t,e,n,r){var o;(void 0===(o={login:t,password:e})&&(o={}),fetch(n,{method:"POST",body:JSON.stringify(o),headers:{"Content-Type":"application/json"},credentials:"same-origin"}).then((function(t){return t}),(function(t){console.log(t,"data wasn't wrote")}))).then((function(t){if(200===t.status)return r.setLoginStatus(!0),l(u,r),t}))},l=function(t,e){t.innerHTML="";var n=p("input","exitButton"),r=p("div","mainDiv"),o=p("div","projectsDiv"),u=p("div","backgroundDiv"),i=p("form","fullForm"),a=p("form","partsForm"),c=p("form","backgroundForm"),l=p("input","full"),s=p("input","parts"),f=p("input","background"),d=p("input","submit"),h=p("input","submit"),b=p("input","submit"),y=p("h3","fullH3"),v=p("h3","partsH3"),m=p("h3","backgroundH3");i.action="full",i.method="POST",i.enctype="multipart/form-data",a.action="parts",a.method="POST",a.enctype="multipart/form-data",c.action="background",c.method="POST",c.enctype="multipart/form-data",l.type="file",l.name="full",s.type="file",s.name="full",f.type="file",f.name="full",d.type="submit",h.type="submit",b.type="submit",i.append(l,d),a.append(s,h),c.append(f,b),o.append(y,i,v,a),u.append(m,c),r.append(o,u),t.append(r),n.setAttribute("type","button"),n.innerText="exit",n.addEventListener("click",(function(){e.setLoginStatus(!1)}))},s=function(t,e,n,r){return new(n||(n=Promise))((function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((r=r.apply(t,e||[])).next())}))},f=function(t,e){var n,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},p=function(t,e){var n=document.createElement(t);return n.setAttribute("id",e),n},d=function(t,e,n){var r=p("input","adminAccess");return r.setAttribute("type","button"),r.setAttribute("value","admin access"),r.addEventListener("click",(function(){document.body.style.backgroundImage="",t.innerHTML="",function(t,e,n){var r=p("div","loginDiv"),o=p("input","loginForm"),u=p("input","passwordForm"),i=p("input","loginButton");i.addEventListener("click",(function(t){var r=document.getElementById("loginForm").value,o=document.getElementById("passwordForm").value;13===t.keyCode?r?o?c(r,o,n,e):alert("Please enter password"):alert("Please enter login"):c(r,o,n,e)})),u.setAttribute("type","password"),i.setAttribute("type","submit"),r.append(o,u,i),t.append(r)}(t,e,n)})),r};function h(t,e){return s(this,void 0,void 0,(function(){var t,n;return f(this,(function(r){switch(r.label){case 0:return[4,a(e)];case 1:return t=r.sent(),n=i(t),document.body.style.backgroundImage="url(http://127.0.0.1:3000"+n+")",document.body.style.backgroundSize="110%",document.body.style.backgroundRepeat="no-repeat",[2]}}))}))}function b(t,e,n){return s(this,void 0,void 0,(function(){var r,o,u,c,l=this;return f(this,(function(d){switch(d.label){case 0:return[4,a(e)];case 1:return r=d.sent(),o=i(r),u=p("div","fullDiv"),(c=p("img","fullImg")).addEventListener("click",(function(){return s(l,void 0,void 0,(function(){return f(this,(function(e){switch(e.label){case 0:return[4,y(t,n)];case 1:return e.sent(),[2]}}))}))})),c.src=o,u.append(c),t.append(u),[2]}}))}))}function y(t,e){return s(this,void 0,void 0,(function(){var n,r,o,u;return f(this,(function(c){switch(c.label){case 0:return[4,a(e)];case 1:return n=c.sent(),r=i(n),(o=p("img","partOfImg")).src=r,document.getElementById("partsDiv")?((u=document.getElementById("partsDiv")).append(o),t.append(u)):((u=p("div","partsDiv")).append(o),t.append(u)),[2]}}))}))}class v extends class{constructor(){this._handlers=[]}addChangeEventListener(t){this._handlers.push(t)}executeHandlers(){this._handlers.forEach(t=>{t()})}}{constructor(){super(),this._userIsLoggedIn=!1}setLoginStatus(t){this._userIsLoggedIn=t,this.executeHandlers()}getLoginStatus(){return this._userIsLoggedIn}}var m=function(t,e,n,r){return new(n||(n=Promise))((function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((r=r.apply(t,e||[])).next())}))},g=function(t,e){var n,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};var w=function(t,e,n,r){return new(n||(n=Promise))((function(o,u){function i(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((r=r.apply(t,e||[])).next())}))},k=function(t,e){var n,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=e.call(t,i)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}},x="http://127.0.0.1:3000/login";window.addEventListener("load",(function(){return w(void 0,void 0,void 0,(function(){var t,e,n;return k(this,(function(r){return t=document.getElementById("root"),e=new v,n=d(t,e,x),t.append(n),function(t,e){m(this,void 0,void 0,(function(){return g(this,(function(n){switch(n.label){case 0:return[4,h(0,e)];case 1:return n.sent(),[4,b(t,"http://127.0.0.1:3000/getfull","http://127.0.0.1:3000/getpart")];case 2:return n.sent(),[2]}}))}))}(t,"http://127.0.0.1:3000/getbackground"),[2]}))}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,